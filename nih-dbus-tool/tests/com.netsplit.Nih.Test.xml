<node name="/com/netsplit/Nih">
  <interface name="com.netsplit.Nih.Test">
    <method name="OrdinaryMethod">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method>
    <method name="NamelessMethod">
      <arg type="s" direction="in" />
      <arg type="s" direction="out" />
    </method>
    <method name="AsyncMethod">
      <annotation name="com.netsplit.Nih.Method.Async" value="true" />
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method>

    <method name="ByteToStr">
      <arg name="input" type="y" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToByte">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="y" direction="out" />
    </method>
    <method name="BooleanToStr">
      <arg name="input" type="b" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToBoolean">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="b" direction="out" />
    </method>
    <method name="Int16ToStr">
      <arg name="input" type="n" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToInt16">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="n" direction="out" />
    </method>
    <method name="UInt16ToStr">
      <arg name="input" type="q" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToUInt16">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="q" direction="out" />
    </method>
    <method name="Int32ToStr">
      <arg name="input" type="i" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToInt32">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="i" direction="out" />
    </method>
    <method name="UInt32ToStr">
      <arg name="input" type="u" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToUInt32">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="u" direction="out" />
    </method>
    <method name="Int64ToStr">
      <arg name="input" type="x" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToInt64">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="x" direction="out" />
    </method>
    <method name="UInt64ToStr">
      <arg name="input" type="t" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToUInt64">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="t" direction="out" />
    </method>
    <method name="DoubleToStr">
      <arg name="input" type="d" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToDouble">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="d" direction="out" />
    </method>
    <method name="ObjectPathToStr">
      <arg name="input" type="o" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToObjectPath">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="o" direction="out" />
    </method>
    <method name="SignatureToStr">
      <arg name="input" type="g" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToSignature">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="g" direction="out" />
    </method>
    <method name="StructToStr">
      <arg name="input" type="(su)" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method>
    <method name="StrToStruct">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="(su)" direction="out" />
    </method>
    <method name="Int32ArrayToStr">
      <arg name="input" type="ai" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToInt32Array">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="ai" direction="out" />
    </method> 
    <method name="StrArrayToStr">
      <arg name="input" type="as" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToStrArray">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="as" direction="out" />
    </method> 
    <method name="Int32ArrayArrayToStr">
      <arg name="input" type="aai" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method> 
    <method name="StrToInt32ArrayArray">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="aai" direction="out" />
    </method> 
    <method name="StructArrayToStr">
      <arg name="input" type="a(su)" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method>
    <method name="StrToStructArray">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="a(su)" direction="out" />
    </method>
    <method name="DictEntryArrayToStr">
      <arg name="input" type="a{su}" direction="in" />
      <arg name="output" type="s" direction="out" />
    </method>
    <method name="StrToDictEntryArray">
      <arg name="input" type="s" direction="in" />
      <arg name="output" type="a{su}" direction="out" />
    </method>

    <signal name="NewByte">
      <arg name="value" type="y" />
    </signal>
    <signal name="NewBoolean">
      <arg name="value" type="b" />
    </signal>
    <signal name="NewInt16">
      <arg name="value" type="n" />
    </signal>
    <signal name="NewUInt16">
      <arg name="value" type="q" />
    </signal>
    <signal name="NewInt32">
      <arg name="value" type="i" />
    </signal>
    <signal name="NewUInt32">
      <arg name="value" type="u" />
    </signal>
    <signal name="NewInt64">
      <arg name="value" type="x" />
    </signal>
    <signal name="NewUInt64">
      <arg name="value" type="t" />
    </signal>
    <signal name="NewDouble">
      <arg name="value" type="d" />
    </signal>
    <signal name="NewString">
      <arg name="value" type="s" />
    </signal>
    <signal name="NewObjectPath">
      <arg name="value" type="o" />
    </signal>
    <signal name="NewSignature">
      <arg name="value" type="g" />
    </signal>
    <signal name="NewStruct">
      <arg name="value" type="(su)" />
    </signal>
    <signal name="NewInt32Array">
      <arg name="value" type="ai" />
    </signal>
    <signal name="NewStrArray">
      <arg name="value" type="as" />
    </signal>
    <signal name="NewInt32ArrayArray">
      <arg name="value" type="aai" />
    </signal>
    <signal name="NewStructArray">
      <arg name="value" type="a(su)" />
    </signal>
    <signal name="NewDictEntryArray">
      <arg name="value" type="a{su}" />
    </signal>

    <property name="byte" type="y" access="readwrite" />
    <property name="boolean" type="b" access="readwrite" />
    <property name="int16" type="n" access="readwrite" />
    <property name="uint16" type="q" access="readwrite" />
    <property name="int32" type="i" access="readwrite" />
    <property name="uint32" type="u" access="readwrite" />
    <property name="int64" type="x" access="readwrite" />
    <property name="uint64" type="t" access="readwrite" />
    <property name="double" type="d" access="readwrite">
      <annotation name="com.netsplit.Nih.Symbol" value="dubble" />
    </property>
    <property name="string" type="s" access="readwrite" />
    <property name="object_path" type="o" access="readwrite" />
    <property name="signature" type="g" access="readwrite" />
    <property name="structure" type="(su)" access="readwrite" />
    <property name="int32_array" type="ai" access="readwrite" />
    <property name="str_array" type="as" access="readwrite" />
    <property name="int32_array_array" type="aai" access="readwrite" />
    <property name="struct_array" type="a(su)" access="readwrite" />
    <property name="dict_entry_array" type="a{su}" access="readwrite" />
  </interface>
</node>
